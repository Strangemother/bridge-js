/*! bridge.min.js build:0.0.1, production. Copyright(c) 2011 Flotype <team@flotype.com> MIT Licensed */
function Bridge(a){var b=this,c={hook_channel_handler:function(a,c,d){b.children["channel:"+a]=b.children[c._getRef()._pathchain[2]],d&&d.call(b.getChannel(a),a)},getservice:function(a,c){c.call(b.children[a])}};this.options=a,this.children={system:c},this.connected=!1,this.connection=new Connection(this)}function Connection(a){var b=this;this.Bridge=a,this.options=util.extend(defaultOptions,a.options),this.establishConnection()}var log;window.console&&console.log?log=function(){console.log.apply(console,arguments)}:log=function(){};var util={hasProp:function(a,b){return Object.prototype.hasOwnProperty.call(Object(a),b)},extend:function(a,b){function d(){this.constructor=a}if(a===undefined||b===undefined)return a;for(var c in b)util.hasProp(b,c)&&(a[c]=b[c]);d.prototype=b.prototype,a.prototype=new d,a.__super__=b.prototype;return a},generateGuid:function(){var a=function(){return((1+Math.random())*65536|0).toString(16).substring(1)};return""+a()+a()+a()+a()+a()+a()+a()+a()},typeOf:function(a){var b=typeof a;b==="object"&&(a?typeof a.length=="number"&&!a.propertyIsEnumerable("length")&&typeof a.splice=="function"&&(b="array"):b="null");return b},getKeys:Object.keys||function(a){var b=[];for(var c in a)b.push(c);return b},inherit:function(a,b){var c=function(){};c.prototype=b.prototype,a.prototype=new c},stringify:JSON.stringify,parse:JSON.parse,log:log,error:function(){util.log.apply(this,arguments)},warn:function(){util.log.apply(this,arguments)},info:function(){util.log.apply(this,arguments)}},Ref=function(a,b,c){function d(){var a=[].slice.apply(arguments);d.call.apply(d,a)}d._fixops=function(){for(var a in d._operations){var b=d._operations[a];console.log("FIXING",b),d[b]=d.get(b).call,d[b+"_e"]=d.get(b).call}},d.get=function(a){var a=a.split(".");return d._bridgeRoot.getPathObj(d._pathchain.concat(a))},d.call=function(){var a=[].slice.apply(arguments);console.log("CALL_E",d._pathchain,a);return d._bridgeRoot.send(a,d)},d.getLocalName=function(){return d._pathchain[2]},d._getRef=function(a){d._operations=a,d._fixops();return d},d.toDict=function(){return{ref:d._pathchain,operations:d._operations}},d._operations=c||[],d._bridgeRoot=a,d._pathchain=b,d._fixops();return d},Serializer={serialize:function(a,b){var c=util.typeOf(b),d;switch(c){case"object":var e=!1,f=[],g={},h,i;for(h in b){var i=b[h];util.typeOf(i)=="function"?(g[h]=!0,e=!0):f.push(h)}g=util.getKeys(g),b._getRef&&util.typeOf(b._getRef)==="function"&&(e=!0);if(e){var j;b._getRef&&util.typeOf(b._getRef)==="function"?j=b._getRef():j=a.createCallback(b);var k=j._getRef(g).toDict();d=k}else{var l={};for(pos in f){var h=f[pos],i=b[h];l[h]=Serializer.serialize(a,i)}d=l}break;case"array":var l=[];for(pos in b){var i=b[pos];l.push(Serializer.serialize(a,i))}d=l;break;case"function":var k;if(b._getRef&&util.typeOf(b._getRef)==="function")k=b._getRef().toDict();else{var m=function(){};m.callback=b;var j=a.createCallback(m);k=j.get("callback").toDict()}d=k;break;default:d=b}return d},unserialize:function(a,b){for(var c in b){var d=b[c];typeof d=="object"&&(util.hasProp(d,"ref")?b[c]=a.getPathObj(d.ref)._getRef(d.operations):Serializer.unserialize(a,d))}}},defaultOptions={url:"http://localhost:8080/now",tcp:!1};Connection.prototype.DEFAULT_EXCHANGE="T_DEFAULT",Connection.prototype.reconnect=function(){!this.connected&&this.interval<12800&&(this.establishConnection(),setTimeout(this.reconnect,this.interval*=2))},Connection.prototype.establishConnection=function(){var a=this,b=this.Bridge;this.options.tcp?(util.info("Starting TCP connection",this.options.host,this.options.port),this.sock=(new TCP(this.options)).sock):(util.info("Starting SockJS connection"),this.sock=new SockJS(this.options.url,this.options.protocols,this.options.sockjs)),this.sock.onmessage=function(c){util.info("clientId and secret received",c.data);var d=c.data.toString().split("|");a.clientId=d[0],a.secret=d[1],a.interval=400,a.sock.onmessage=function(a){try{a=util.parse(a.data),console.log("Received",a),b.onMessage(a)}catch(c){util.error("Message parsing failed: ",c.message,c.stack)}},b.onReady()},this.sock.onopen=function(){util.info("Beginning handshake");var b={command:"CONNECT",data:{session:[a.clientId||0,a.secret||0]}};b=util.stringify(b),a.sock.send(b)},this.sock.onclose=function(){util.warn("Connection closed"),a.connected=!1,a.options.reconnect&&a.reconnect()}},Connection.prototype.getQueueName=function(){return"C_"+this.clientId},Connection.prototype.getExchangeName=function(){return"T_"+this.clientId},Connection.prototype.send=function(a,b){var c={command:"SEND",data:{args:Serializer.serialize(this.Bridge,a),destination:Serializer.serialize(this.Bridge,b)}};c=util.stringify(c),console.log(c),this.sock.send(c)},Connection.prototype.publishService=function(a,b){util.info("Joining worker pool",a);var c={command:"JOINWORKERPOOL",data:{name:a,callback:Serializer.serialize(this.Bridge,b)}};c=util.stringify(c),this.sock.send(c)},Connection.prototype.joinChannel=function(a,b,c){var d={command:"JOINCHANNEL",data:{name:a,handler:Serializer.serialize(this.Bridge,b),callback:Serializer.serialize(this.Bridge,c)}};d=util.stringify(d),this.sock.send(d)};var queue=[];Bridge.prototype.onReady=function(){util.info("Handshake complete");if(!this.connected){this.connected=!0;for(var a=0,b=queue.length;a<b;a++)queue[a]()}},Bridge.prototype.onMessage=function(a){Serializer.unserialize(this,a);var b=a,c=b.destination;if(!c)util.warn("No destination in message",b);else{var d=b.destination._pathchain,e=b.args;this.execute(d,e)}},Bridge.prototype.execute=function(a,b){console.log("execute",arguments);var c=this.children[a[2]],d=c[a[3]];d?d.apply(c,b):util.warn("No Func nor Default Handler for",a)},Bridge.prototype.publishService=function(a,b,c){var d=this;if(!b._getRef||util.typeOf(b._getRef)!=="function")b._getRef=function(){return d.getPathObj(["named",a,a])},this.connection.publishService(a,c);else{util.error("Service can't be renamed! "+a+" old "+b._getRef().getLocalName());return}this.children[a]=b;return b._getRef()},Bridge.prototype.createCallback=function(a){var b=this,c;!a._getRef||util.typeOf(a._getRef)!=="function"?(c=util.generateGuid(),a._getRef=function(){return b.getPathObj(["client",b.getClientId(),c])}):c=a.getLocalName(),this.children[c]=a;return a._getRef()},Bridge.prototype.joinChannel=function(a,b,c){var d=this,e=Serializer.serialize(this,b);console.log(e);var f=e.ref[1];d.connection.joinChannel(a,b,c)},Bridge.prototype.send=function(a,b){this.connection.send(a,b)},Bridge.prototype.ready=function(a){this.connected?a():queue.push(a)},Bridge.prototype.getClientId=function(){return this.connection.clientId},Bridge.prototype.getPathObj=function(a){return new Ref(this,a)},Bridge.prototype.getRootRef=function(){return this.getPathObj(["client",this.getClientId()])},Bridge.prototype.get=function(a){var b=a.split(".");return this.getPathObj(b,!0)},Bridge.prototype.getService=function(a,b){this.getPathObj(["named",a,"system","getservice"]).call(a,b)},Bridge.prototype.getChannel=function(a){return this.getPathObj(["channel",a,"channel:"+a])}